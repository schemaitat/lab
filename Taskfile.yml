version: '3'

tasks:
  setup:
    desc: "Setup Kubernetes cluster on Linode"
    cmds:
      - scripts/setup-cluster.sh
    
  teardown:
    desc: "Teardown Kubernetes cluster and destroy all resources"
    cmds:
      - scripts/teardown-cluster.sh
  
  status:
    desc: "Check cluster status and show cluster information"
    cmds:
      - cd terraform && tofu output
      - echo ""
      - echo "Cluster Nodes:"
      - kubectl get nodes --kubeconfig=./kubeconfig.yaml
      - echo ""
      - echo "System Pods:"
      - kubectl get pods -n kube-system --kubeconfig=./kubeconfig.yaml
    
  plan:
    desc: "Show what changes would be applied to infrastructure"
    cmds:
      - cd terraform && tofu plan
      
  apply:
    desc: "Apply infrastructure changes"
    cmds:
      - cd terraform && tofu apply
      
  kubectl:
    desc: "Run kubectl commands with the cluster kubeconfig"
    cmds:
      - kubectl --kubeconfig=./kubeconfig.yaml {{.CLI_ARGS}}
    
  logs:
    desc: "View logs from a specific pod"
    cmds:
      - kubectl logs {{.CLI_ARGS}} --kubeconfig=./kubeconfig.yaml
      
  shell:
    desc: "Get a shell in a pod"
    cmds:
      - kubectl exec -it {{.CLI_ARGS}} --kubeconfig=./kubeconfig.yaml -- /bin/bash

  clean:
    desc: "Clean up local terraform and kubernetes files"
    cmds:
      - rm -f kubeconfig.yaml
      - rm -f terraform/terraform.tfstate*
      - rm -rf terraform/.terraform/
      - echo "Local files cleaned up"

  fresh:
    desc: "Get a completely fresh state by destroying cluster and cleaning all files"
    cmds:
      - echo "Getting fresh state..."
      - echo "1. Destroying existing cluster (if any)..."
      - cd terraform && tofu destroy -auto-approve || echo "No existing infrastructure to destroy"
      - echo "2. Cleaning up all local files..."
      - rm -f kubeconfig.yaml
      - rm -f terraform/terraform.tfstate*
      - rm -rf terraform/.terraform/
      - echo "3. Reinitializing Terraform..."
      - cd terraform && tofu init
      - echo ""
      - echo "Fresh state achieved!"
      - echo "Run 'task setup' to create a new cluster"

  bill:
    desc: "Generate Linode billing report as bill.pdf"
    cmds:
      - uv run scripts/generate_billing_report.py

  install-argocd:
    desc: "Install ArgoCD with App of Apps pattern"
    cmds:
      - scripts/install-argocd.sh

  argocd-ui:
    desc: "Start port forwarding to ArgoCD UI"
    cmds:
      - |
        echo "ArgoCD UI will be available at https://localhost:8080"
        echo "Username: admin"
        echo "Starting port forwarding..."
        kubectl port-forward svc/argocd-server -n argocd 8080:443 --kubeconfig=./kubeconfig.yaml

  monitoring-ui:
    desc: "Start port forwarding to Prometheus UI"
    cmds:
      - |
        echo "Prometheus UI will be available at http://localhost:9090"
        echo "Starting port forwarding..."
        kubectl port-forward svc/prometheus -n monitoring 9090:9090 --kubeconfig=./kubeconfig.yaml

  demo-app:
    desc: "Start port forwarding to Hello World demo app"
    cmds:
      - |
        echo "Hello World demo app will be available at http://localhost:8081"
        echo "Starting port forwarding..."
        kubectl port-forward svc/hello-world -n demo 8081:80 --kubeconfig=./kubeconfig.yaml

  cost-dashboard:
    desc: "Start port forwarding to Cost Dashboard"
    cmds:
      - |
        echo "Cost Dashboard will be available at http://localhost:8082"
        echo "Starting port forwarding..."
        kubectl port-forward svc/cost-dashboard -n cost-monitoring 8082:80 --kubeconfig=./kubeconfig.yaml

  setup-complete:
    desc: "Complete cluster setup with ArgoCD and applications"
    cmds:
      - task: setup
      - task: install-argocd
      - echo ""
      - echo "Complete setup finished!"
      - echo "================================"
      - echo "* Kubernetes cluster running with 2GB nodes"
      - echo "* ArgoCD installed with App of Apps pattern"
      - echo "* Sample applications deployed automatically"
      - echo ""
      - echo "Available UIs (External Access):"
      - echo "* ArgoCD - https://lab.schemaitat.de/argocd"
      - echo "* Prometheus - https://lab.schemaitat.de/prometheus"
      - echo "* Hello World - https://lab.schemaitat.de/hello"
      - echo "* Cost Dashboard - https://lab.schemaitat.de/cost"
      - echo ""
      - echo "Local Port Forwarding (if needed):"
      - echo "* ArgoCD - task argocd-ui (https://localhost:8080)"
      - echo "* Prometheus - task monitoring-ui (http://localhost:9090)"
      - echo "* Hello World - task demo-app (http://localhost:8081)"
      - echo "* Cost Dashboard - task cost-dashboard (http://localhost:8082)"
      - echo ""
      - echo "Other commands:"
      - echo "* Check status - task status"
      - echo "* Cost report - task bill"
  
  k9s:
    desc: "Start K9s terminal UI"
    cmds:
      - |
        echo "K9s will be available in your terminal"
        echo "Starting K9s..."
        k9s --kubeconfig=./kubeconfig.yaml